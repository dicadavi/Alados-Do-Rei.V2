datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}


generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int    @id @default(autoincrement())
  name          String?
  userName      String? @unique
  birth         DateTime	@db.Date
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]
  userRoles     UserRoles[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Roles {
  id  Int @id @default(autoincrement())
  name String @unique
  isBoard Boolean
  userRoles     UserRoles[]
}


model UserRoles{
  userId       Int
  rolesId      Int @unique  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles        Roles    @relation(fields: [rolesId], references: [id], onDelete: Cascade)
}