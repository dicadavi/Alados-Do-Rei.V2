generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        Int         @id @default(autoincrement())
  name      String?
  image     String?
  password  String
  birth     DateTime    @db.Date
  userName  String     @unique
  accounts  Account[]
  sessions  Session[]
  userRoles UserRoles[]
  unit           Unit?      @relation(fields: [id], references: [id])
  rankings       Ranking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Roles {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  isBoard   Boolean
  userRoles UserRoles?
}

model UserRoles {
  userId  Int
  rolesId Int   @unique
  roles   Roles @relation(fields: [rolesId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Definição do modelo para a tabela units
// Definição do modelo para a tabela units
model Unit {
  id            Int           @id @default(autoincrement())
  name          String
  user         User[]
  unit_rankings UnitRanking[]
}
// Definição do modelo para a tabela ranking
model Ranking {
  user_id    Int    @id @map("user_id")
  user       User   @relation(fields: [user_id], references: [id])
  points     Int

  @@map("ranking")
}
// Definição do modelo para a tabela unit_ranking
model UnitRanking {
  unit_id    Int    @id @map("unit_id")
  unit       Unit   @relation(fields: [unit_id], references: [id])
  points     Int

  @@map("unit_ranking")
}